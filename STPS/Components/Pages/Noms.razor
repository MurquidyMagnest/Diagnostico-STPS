@page "/Noms"
@using System.Text.Json


@inject IConfiguration Configuracion;
@inject HttpClient Http;
@inject IJSRuntime JSRuntime;
@inject NavigationManager UriHelper;


<PageTitle>Normas Oficiales Mexicanas de Seguridad y Salud en el Trabajo</PageTitle>


<Div Class="grid-container">

	<h3>Normas</h3>


	<Div class="table-container">

		<Div Class="datatable-bar">
			<button class="btn-agregar action_button" @onclick="() => IsEnvioModalOpen = true">
				Nuevo registro
			</button>

			<div class="search-container">
				<input @bind="searchTerm" placeholder="Buscar norma" @oninput="SearchNormas" class="search-input" />
				<button @onclick="() => GetNorma(searchTerm)" class="search-button">Buscar</button>
			</div>
		</Div>

		@if (IsSpinner)
		{
			<span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
		}
		else
		{
			@if (listaNormas != null && listaNormas.Any())
			{


				<DataGrid TItem="Normas" Data="@listaNormas" ShowPager="true" AllowSorting="true" AllowFiltering="true"
				PageSize="8" Class="custom-datagrid">
					<Columns>


						<DataGridColumn TItem="Normas" Field="categoria_noms" Caption="Categoría" Width="150" />

						<DataGridColumn TItem="Normas" Field="@nameof(Normas.nombre_noms)" Caption="Nombre">
							<DisplayTemplate>
								<span @onclick="@(() => onChange(context.nombre_noms, context.id))" style="cursor:pointer; color:blue;">
									@context.nombre_noms
								</span>
							</DisplayTemplate>
						</DataGridColumn>
						<DataGridColumn TItem="Normas" Field="descripcion" Caption="Descripción" Width="300" />

						<!-- Columna de Acciones con iconos -->
						<DataGridColumn TItem="Normas" Caption="Acciones" Width="150">
							<DisplayTemplate>
								<Div class="action-buttons">
									<button class="action_button" type="button" @onclick="() => EditarNorma(context)">
										<i class="fas fa-edit"></i> <!-- Icono de eliminación -->
									</button>
									<button class="action_button" type="button" @onclick="async () => await ModalNorma(context.id, context.nombre_noms)">
										<i class="fas fa-trash"></i> <!-- Icono de eliminación -->
									</button>
								</Div>
							</DisplayTemplate>
						</DataGridColumn>



					</Columns>
				</DataGrid>


			}
			else
			{
				<Div Class="not-found">
					<img id="not-found-img" src="assets/not-found.png">
					<p>Sin resultados para mostrar</p>
				</Div>
			}
		}

	</Div>

</Div>


<!-- MODAL DE EDICIÓN -->
@if (IsEditModalOpen)
{
	<div class="modal-overlay">
		<div class="modal">
			<h3>Editar norma</h3>
			<input @bind="normaSeleccionada.categoria_noms" placeholder="ID NOMS" />
			<input @bind="normaSeleccionada.nombre_noms" placeholder="Descripción" />
			<input @bind="normaSeleccionada.descripcion" placeholder="Comprobación" />

			<button class="btn btn-primary me-2" style="width: 150px;"
			@onclick="() => UpdateNormaAsync(normaSeleccionada)">
				Guardar
			</button>

			<button class="btn btn-secondary" style="width: 150px;"
			@onclick="() => CerrarModal()">
				Cancelar
			</button>

		</div>
	</div>
}


<!-- MODAL DE ENVÍO -->
@if (IsEnvioModalOpen)
{

	<div class="modal-overlay">
		<div class="modal">
			<h3>Nueva norma</h3>
			<input @bind="form.categoria_noms" placeholder="Categoría" />
			<input @bind="form.nombre_noms" placeholder="Nombre" />
			<input @bind="form.descripcion" placeholder="Descripción" />

			<button class="btn btn-primary me-2" style="width: 150px;"
			@onclick="() => PostNorma(form.categoria_noms, form.nombre_noms, form.descripcion)">
				Enviar
			</button>

			<button class="btn btn-secondary" style="width: 150px;"
			@onclick="() => CerrarModal()">
				Cancelar
			</button>


			@if (!string.IsNullOrEmpty(mensaje))
			{
				<p class="success-message">@mensaje</p>
			}
		</div>
	</div>

}

<!-- ¿ESTÁS SEGURO DE QUERER ELIMINAR ESTE REGISTRO? -->
@if (IsDeleteModalOpen)
{
	<div class="modal-delete">
		<div class="modal-inf-delete">
			<h3>¿Deseas eliminar la norma @nombre?</h3>
			<p>Si lo haces, se perderán tus incisos.</p>
			<div class="modal-buttons">
				<button class="btn-confirmar" @onclick="async () => await DeleteNorma(idNoms)">Eliminar</button>
				<button class="btn-cancelar" @onclick="() => IsDeleteModalOpen = false">Cancelar</button>
			</div>
		</div>
	</div>
}


@code {
	private string? UrlApi;
	private Normas normas = new Normas();
	private string searchTerm = "";
	private string categoria = "";
	private string nombre = "";
	private string descripcion = "";
	private string mensaje = "";
	private int idNoms = 0;
	public string State = "";

	private bool IsEditModalOpen = false;
	private bool IsEnvioModalOpen = false;
	private bool IsDeleteModalOpen = false;

	private bool IsSpinner = true;

	private Normas normaSeleccionada = new Normas();

	private Normas form = new();


	private List<Normas> listaNormas = new List<Normas>();

	protected override async Task OnInitializedAsync()
	{
		UrlApi = Configuracion["ConfiguracionesAplicacion:UrlApi"];
		await GetNorma("");

	}



	void onChange(string ruta, int id)
	{

		UriHelper.NavigateTo("noms/" + id);
	}

	private void EditarNorma(Normas norma)
	{
		normaSeleccionada = new Normas
			{
				id = norma.id,
				categoria_noms = norma.categoria_noms,
				nombre_noms = norma.nombre_noms,
				descripcion = norma.descripcion
			};

		IsEditModalOpen = true;
	}


	private void CerrarModal()
	{
		IsEditModalOpen = false;
		IsEnvioModalOpen = false;
		form = new Normas();
		mensaje = "";


	}

	private async Task SearchNormas()
	{
		await GetNorma(searchTerm);
	}

	public async Task GetNorma(string searchTerm = "")
	{
		var response = "";

		try
		{
			if (searchTerm == "")
			{
				response = await Http.GetStringAsync($"{UrlApi}normas");
			}
			else
			{
				response = await Http.GetStringAsync($"{UrlApi}normas/busqueda_noms?searchTerm={searchTerm}");
			}

			//  var response = await Http.GetStringAsync($"{UrlApi}/busqueda_noms?searchTerm={searchTerm}");
			await JSRuntime.InvokeVoidAsync("console.log", response);

			var normas = JsonSerializer.Deserialize<List<Normas>>(response);

			if (normas != null)
			{
				listaNormas = normas;
				StateHasChanged();
			}
			else
			{
				await JSRuntime.InvokeVoidAsync("console.log", "No se recibieron datos.");
			}
		}
		catch (Exception ex)
		{
			//await JSRuntime.InvokeVoidAsync("console.log", "Error: " + ex.Message);
		}

		IsSpinner = false;
	}

	public async Task PostNorma(string categoria, string nombre, string descripcion)
	{

		var nuevaNorma = new
		{
			categoria_noms = categoria,
			nombre_noms = nombre,
			descripcion = descripcion
		};


		var response = await Http.PostAsJsonAsync($"{UrlApi}normas", nuevaNorma);


		if (response.IsSuccessStatusCode)
		{
			Console.WriteLine("Norma agregada correctamente.");
			mensaje = "✅ Norma agregada correctamente.";
			categoria = "";
			nombre = "";
			descripcion = "";


			await GetNorma("");


			form = new Normas();

		}
		else
		{
			Console.WriteLine($"Error: {response.StatusCode}");
			mensaje = "❌ Error al agregar la norma.";

		}
	}

	private async Task ModalNorma(int id_norma, string nom_norma)
	{
		idNoms = id_norma;
		nombre = nom_norma;
		IsDeleteModalOpen = true;

	}

	private async Task DeleteNorma(int idNoms)
	{
		try
		{
			var url = $"{UrlApi}normas/{idNoms}";
			var response = await Http.DeleteAsync(url);

			if (response.IsSuccessStatusCode)
			{
			
				GetNorma();
				IsDeleteModalOpen = false;
			}
			else
			{
				
			}
		}
		catch (Exception ex)
		{
			// Captura errores de conexión o cualquier excepción
			Console.WriteLine($"Error: {ex.Message}");
		}
	}


	private async Task UpdateNormaAsync(Normas norma)
	{
		try
		{

			var response = await Http.PutAsJsonAsync($"{UrlApi}normas", norma);


			if (response.IsSuccessStatusCode)
			{
				mensaje = "✅ Norma actualizada correctamente.";

				await GetNorma("");
				CerrarModal();
			}
			else
			{
				mensaje = "❌ Error al actualizar la norma.";
			}
		}
		catch (Exception ex)
		{
			mensaje = "❌ Ocurrió un error: " + ex.Message;
		}
	}

}
