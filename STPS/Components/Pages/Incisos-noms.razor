@page "/noms/{inciso:int}"
@using System.Text.Json

@using Blazorise
@using Blazorise.Bootstrap
@using Blazorise.Icons.FontAwesome
@using Blazorise.Components

@rendermode InteractiveServer

@inject IConfiguration Configuracion;
@inject NavigationManager NavManager;
@inject HttpClient Http;
@inject IJSRuntime JSRuntime


<PageTitle>Normas Oficiales Mexicanas de Seguridad y Salud en el Trabajo</PageTitle>

<Div Class="grid-container">

	@if (norma != null)
	{
		<h5>@norma.nombre_noms</h5>
		<h5>@norma.descripcion</h5>
		<h5>Categoría: @norma.categoria_noms</h5>
	}


	<Div class="table-container">

		<Div Class="datatable-bar">
			<button class="btn-agregar action_button" @onclick="() => IsPostModalOpen = true">
				Nuevo registro
			</button>

			<div class="search-container">
				<input @bind="searchTerm" placeholder="Buscar inciso" @oninput="SearchIncisos" class="search-input" />
				<button @onclick="() => GetInciso(searchTerm)" class="search-button">Buscar</button>
			</div>
		</Div>

		@if (IsSpinner)
		{
			<span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
		}
		else
		{
			@if (listaIncisos != null && listaIncisos.Any())
			{


				<DataGrid TItem="IncisoNormaDTO" Data="@listaIncisos" ShowPager="true" AllowFiltering="true"
				PageSize="8" Class="custom-datagrid">
					<Columns>
						<DataGridColumn TItem="IncisoNormaDTO" Field="inciso_noms" Caption="Inciso" Width="100" />
						<DataGridColumn TItem="IncisoNormaDTO" Field="descripcion" Caption="Descripción" Width="300" />
						<DataGridColumn TItem="IncisoNormaDTO" Field="comprobacion" Caption="Comprobación" Width="150" />
						<DataGridColumn TItem="IncisoNormaDTO" Field="criterio_acepton" Caption="Criterio de aceptación" Width="300" />
						<DataGridColumn TItem="IncisoNormaDTO" Field="observacion" Caption="Observación" Width="300" />


						<DataGridColumn TItem="IncisoNormaDTO" Caption="Acciones" Width="150">
							<DisplayTemplate>
								<Div class="action-buttons">
									<button class="action_button" type="button" @onclick="() => EditarInciso(context)">
										<i class="fas fa-edit"></i>
									</button>
									<button type="button" class="action_button" @onclick="async () => await IncisoModal(context.id, context.inciso_noms)">
										<i class="fas fa-trash"></i>
									</button>
								</Div>
							</DisplayTemplate>
						</DataGridColumn>

					</Columns>
				</DataGrid>


			}
			else
			{
				<Div Class="not-found">
					<img id="not-found-img" src="assets/not-found.png">
					<p>Sin resultados para mostrar</p>
				</Div>
			}
		}
	</Div>

</Div>



<!-- MODAL DE EDICIÓN -->
@if (IsEditModalOpen)
{
	<div class="modal-overlay">
		<div class="modal">
			<h3>Editar inciso</h3>

			<p>Inciso</p>
			<input @bind="incisoSeleccionado.inciso_noms" placeholder="Inciso" />
			<p>Descripción</p>
			<textarea @bind="incisoSeleccionado.descripcion" placeholder="Descripción" />
			<p>Comprobación</p>
			<input @bind="incisoSeleccionado.comprobacion" placeholder="Comprobación" />
			<p>Criterio de aceptación</p>
			<textarea @bind="incisoSeleccionado.criterio_acepton" placeholder="Criterio de Aceptación" />
			<p>Observación</p>
			<textarea @bind="incisoSeleccionado.observacion" placeholder="Observación" />

			<button class="btn btn-primary me-2" style="width: 150px;"
			@onclick="() => UpdateIncisoAsync(
            incisoSeleccionado.id,
            inciso,
            incisoSeleccionado.inciso_noms,
            incisoSeleccionado.descripcion,
            incisoSeleccionado.comprobacion,
            incisoSeleccionado.criterio_acepton,
            incisoSeleccionado.observacion)">
				Guardar
			</button>

			<button class="btn btn-secondary" style="width: 150px;"
			@onclick="() => CerrarModal()">
				Cancelar
			</button>

		</div>
	</div>
}



<!-- MODAL DE ENVÍO -->
@if (IsPostModalOpen)
{
	<div class="modal-overlay">
		<div class="modal">

			<h3>Nuevo inciso</h3>


			<input @bind="form.inciso_noms" placeholder="Inciso" />
			<input @bind="form.descripcion" placeholder="Descripción" />
			<input @bind="form.comprobacion" placeholder="Comprobación" />
			<input @bind="form.criterio_acepton" placeholder="Criterio de aceptación" />
			<input @bind="form.observacion" placeholder="Observación" />


			<button class="btn btn-primary me-2" style="width: 150px;"
			@onclick="() => PostInciso(form.inciso_noms, form.comprobacion, form.descripcion, form.criterio_acepton, form.observacion)">
				Enviar
			</button>

			<button class="btn btn-secondary" style="width: 150px;"
			@onclick="() => CerrarModal()">
				Cancelar
			</button>


			@if (!string.IsNullOrEmpty(mensaje))
			{
				<p class="success-message">@mensaje</p>
			}


		</div>
	</div>
}


<!-- ¿ESTÁS SEGURO DE QUERER ELIMINAR ESTE REGISTRO? -->
@if (IsDeleteModalOpen)
{
	<div class="modal-delete">
		<div class="modal-inf-delete">
			<h3>¿Deseas eliminar el inciso @inciso_noms?</h3> 
			<div class="modal-buttons">
				<button class="btn-confirmar" @onclick="async () => await DeleteInciso(id)">Eliminar</button>
				<button class="btn-cancelar" @onclick="() => IsDeleteModalOpen = false">Cancelar</button>
			</div>
		</div>
	</div>
}

@code {
	[Parameter]
	public int inciso { get; set; }

	private string? UrlApi;
	private string searchTerm = "";
	private int id = 0;
	private int id_noms = 0;
	private string inciso_noms = "";
	private string comprobacion = "";
	private string descripcion = "";
	private string criterio_acepton = "";
	private string observacion = "";
	private string mensaje = "";
	private bool IsEditModalOpen = false; 
	private bool IsPostModalOpen = false;
	private bool IsDeleteModalOpen = false;
	//private bool EliminarInciso = false;

	private bool IsSpinner = true;

	private Normas? norma;


	private IncisoNormaDTO incisoSeleccionado = new IncisoNormaDTO();

	private List<IncisoNormaDTO> listaIncisos = new List<IncisoNormaDTO>();
	private List<Normas> listaNormas = new List<Normas>();

	public IEnumerable<Normas>? normas;


	private IncisoNormaDTO form = new();

	private string? nombre_noms;
	private Normas selectedNorma;
	private Normas selectedNormaEdit;


	protected override async Task OnInitializedAsync()
	{
		UrlApi = Configuracion["ConfiguracionesAplicacion:UrlApi"];
		await GetInciso(searchTerm);
		await GetNorma();

	}

	private async Task SearchIncisos()
	{
		await GetInciso(searchTerm);
	}


	public async Task GetNorma()
	{
		try
		{
			var response = await Http.GetStringAsync($"{UrlApi}normas/{inciso}");


			norma = JsonSerializer.Deserialize<Normas>(response);

			if (norma != null)
			{
				StateHasChanged();
			}
			else
			{
				await JSRuntime.InvokeVoidAsync("console.log", "No se recibieron datos.");
			}
		}
		catch (Exception ex)
		{
			await JSRuntime.InvokeVoidAsync("console.log", $"Error: {ex.Message}");
		}
	}

	public async Task GetInciso(string searchTerm = "")
	{
		var response = "";


		try
		{


			response = await Http.GetStringAsync($"{UrlApi}incisos/noms/{inciso}");





			var incisos = JsonSerializer.Deserialize<List<IncisoNormaDTO>>(response);

			if (incisos != null)
			{
				listaIncisos = incisos;
				StateHasChanged();
			}
			else
			{
				await JSRuntime.InvokeVoidAsync("console.log", "No se recibieron datos.");
			}
		}
		catch (Exception ex)
		{
			//await JSRuntime.InvokeVoidAsync("console.log", "Error: " + ex.Message);
		}

		IsSpinner = false;
	}


	private void EditarInciso(IncisoNormaDTO inciso)
	{
		incisoSeleccionado = new IncisoNormaDTO
			{
				id = inciso.id,
				id_noms = inciso.id_noms,
				nombre_noms = inciso.nombre_noms,
				inciso_noms = inciso.inciso_noms,
				descripcion = inciso.descripcion,
				comprobacion = inciso.comprobacion,
				criterio_acepton = inciso.criterio_acepton,
				observacion = inciso.observacion
			};

		selectedNormaEdit = listaNormas.FirstOrDefault(n => n.id == inciso.id_noms);




		IsEditModalOpen = true;
	}

	// Método para cerrar el modal
	private void CerrarModal()
	{
		IsEditModalOpen = false;
		IsPostModalOpen = false;
		form = new IncisoNormaDTO();
		mensaje = "";
	}


	public async Task PostInciso(string inciso_noms, string comprobacion, string descripcion, string criterio_acepton, string observacion)
	{

		var nuevoInciso = new
		{

			id_noms = inciso,
			inciso_noms = inciso_noms,
			comprobacion = comprobacion,
			descripcion = descripcion,
			criterio_acepton = criterio_acepton,
			observacion = observacion


		};

		// Hacer el POST a la API
		var response = await Http.PostAsJsonAsync($"{UrlApi}incisos", nuevoInciso);

		// Manejar la respuesta
		if (response.IsSuccessStatusCode)
		{
			Console.WriteLine("Norma agregada correctamente.");
			mensaje = "✅ Inciso agregado correctamente.";

			await GetInciso("");

			form = new IncisoNormaDTO();


		}
		else
		{
			Console.WriteLine($"Error: {response.StatusCode}");
			mensaje = "❌ Error al agregar el inciso.";

		}
	}

	private async Task IncisoModal(int idInciso, string inciso)
	{
		id = idInciso;
		inciso_noms = inciso;
		IsDeleteModalOpen = true;

	}

	private async Task DeleteInciso(int idInciso)
	{

		try
		{
			var url = $"{UrlApi}incisos/{idInciso}";
			var response = await Http.DeleteAsync(url);

			if (response.IsSuccessStatusCode)
			{

				//	EliminarInciso = false;
				GetInciso("");
				IsDeleteModalOpen = false;

				}
				else
				{
					
				}
			}
			catch (Exception ex)
			{
				// Captura errores de conexión o cualquier excepción
				Console.WriteLine($"Error: {ex.Message}");
			}
		
	}

	//private async Task UpdateIncisoAsync(IncisoNormaDTO inciso)
	private async Task UpdateIncisoAsync(int id, int idNoms, string inciso_noms, string descripcion, string comprobacion, string criterio, string observacion)
	{
		try
		{

			var inciso = new Incisos_normas
				{
					id = id,
					id_noms = idNoms,
					inciso_noms = inciso_noms,
					descripcion = descripcion,
					comprobacion = comprobacion,
					criterio_acepton = criterio,
					observacion = observacion
				};

			var response = await Http.PutAsJsonAsync($"{UrlApi}incisos", inciso);

			await JSRuntime.InvokeVoidAsync("console.log", inciso);

			if (response.IsSuccessStatusCode)
			{
				mensaje = "✅ Inciso actualizado correctamente.";




				await GetInciso("");
				CerrarModal();
			}
			else
			{
				mensaje = "❌ Error al actualizar el inciso.";
			}
		}
		catch (Exception ex)
		{
			mensaje = "❌ Ocurrió un error: " + ex.Message;
		}
	}

}
